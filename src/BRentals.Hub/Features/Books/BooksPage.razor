@page "/categories/{category}/books"

<section class="hero">
    <div class="hero-body pb-1">
        <p class="title">
            @Category
        </p>
        <p class="subtitle">
            See all the books in the @Category category
        </p>
        <div>
            <button @onclick="LoadAsync" class="button is-primary is-outlined">
                <i class="fa fa-recycle mr-1"></i>
                Refresh
            </button>
        </div>

        <div class="mt-2">
            <LoadingBar IsLoading="IsLoading"></LoadingBar>
        </div>
    </div>
</section>

<section class="section pt-0">
    <table class="table is-fullwidth">
        <thead>
        <tr>
            <th>Title</th>
            <th>Authors</th>
            <th>Published</th>
            <th>Metadata</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var book in Books)
        {
            <tr>
                <td>
                    <NavLink href="@NavigateToBook(book.Id)">
                        @book.Title
                    </NavLink>
                </td>
                <td>
                    @AuthorsList(@book.Authors)
                </td>
                <td>
                    @book.Published
                </td>
                <td>
                    <div class="tags">
                        <a target="_blank" href="@ViewRentalsUrl(book.Id)" class="tag is-dark">
                            @book.Id
                        </a>
                        <span class="tag is-link">@book.Category</span>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
</section>

@code {

    [Parameter]
    public string Category { get; set; } = null!;

    [Inject]
    public IBRentalsApiClient Client { get; set; } = null!;

    private string? Continuation { get; set; }

    private List<BookDto> Books { get; set; } = new();

    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
        await base.OnInitializedAsync();
    }

    private async Task LoadAsync()
    {
        IsLoading = true;
        var (isSuccessful, books, continuation) =
            await Client.GetBooksInCategoryAsync(Category);
        IsLoading = false;

        if (isSuccessful)
        {
            Books = books;
            Continuation = continuation;
        }
    }

    private static string AuthorsList(string[] authors) =>
        string.Join(",", authors);

    private string NavigateToBook(string bookId) =>
        $"categories/{Category}/books/{bookId}";

    private string ViewRentalsUrl(string isbn) =>
        $"/rentals/books/{isbn}";

}
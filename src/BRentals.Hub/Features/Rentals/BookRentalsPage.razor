@page "/rentals/books/{isbn?}"

<section class="hero pb-0">
    <div class="hero-body">
        <p class="title">
            Book Rentals
        </p>
        <p class="subtitle">
            Search for rentals via ISBN.
        </p>

        <BookRentalSearchBox Isbn="@Isbn" OnSearch="Search"/>

    </div>
</section>


<section style="margin-top: -2rem" class="section pt-0">
    
    @if (IsLoading)
    {
        <div style="margin-top: -3.5rem" class="mb-2">
            <progress class="progress is-small is-primary" max="100">15%</progress>
        </div>
    }
    
    <RentalsList OnLoadMore="LoadMore" IsBookRentals="true" Rentals="Rentals"></RentalsList>
</section>


@code {

    [Inject]
    public IBRentalsApiClient Client { get; set; } = null!;

    [Inject]
    public IToastService ToastService { get; set; } = null!;

    private List<RentalDto> Rentals { get; set; } = new();

    private string? Continuation { get; set; }

    [Parameter]
    public string? Isbn { get; set; }

    private int PageSize => 5;

    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Isbn is not null)
        {
            await Search(Isbn);
        }
        
        await base.OnInitializedAsync();
    }

    private async Task Search(string isbn)
    {
        Isbn = isbn;

        IsLoading = true;
        var result = await Client.GetBookRentals(isbn, PageSize);
        IsLoading = false;

        if (result.IsSuccessful)
        {
            Rentals = result.Results;
            Continuation = result.Continuation;
        }
    }

    private async Task LoadMore()
    {
        if (Isbn is null)
        {
            return;
        }

        if (Continuation is null)
        {
            ToastService.ShowInfo("No more results");
            return;
        }

        IsLoading = true;

        var result = await Client.GetBookRentals(
            Isbn,
            PageSize,
            Continuation);

        IsLoading = false;

        if (result.IsSuccessful)
        {
            Rentals.AddRange(result.Results);
            Continuation = result.Continuation;
        }
    }
}

